---
name: build
on:
  push:
    branches:
      - master

env:
  IMAGE_TAG: docker.io/roude/simple-server:latest

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: read # for docker/build-push-action to read repo content
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Build an image from Dockerfile
        run: |
          docker build -t "$IMAGE_TAG" .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: ${{ env.IMAGE_TAG }}
          format: "sarif"
          # exit-code: "1"
          vuln-type: "os,library"
          output: "trivy-results.sarif"
          version: "v0.58.0"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@dd746615b3b9d728a6a37ca2045b68ca76d4841a # v3.28.8
        with:
          sarif_file: "trivy-results.sarif"

      - name: Log in to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          images: ${{ env.IMAGE_TAG }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # v6.13.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          #
          #
          #* name: Generate artifact attestation
          #  uses: actions/attest-build-provenance@v1
          #  with:
          #    subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          #    subject-digest: ${{ ste
