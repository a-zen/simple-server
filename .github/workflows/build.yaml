---
name: build
on:
  push:
    branches:
      - master

env:
  IMAGE_TAG: docker.io/roude/simple-server:latest

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: read  # for docker/build-push-action to read repo content
      security-events: write  # for github/codeql-action/upload-sarif to upload SARIF results
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Build an image from Dockerfile
        run: |
          docker build -t "$IMAGE_TAG" .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@595be6a0f6560a0a8fc419ddf630567fc623531d # master
        with:
          image-ref: ${{ env.IMAGE_TAG }}
          format: 'template'
          exit-code: '1'
          vuln-type: 'os,library'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@b611370bb5703a7efb587f9d136a52ea24c5c38c # v3.25.11
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Log in to Docker Hub
        uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3.2.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ env.IMAGE_TAG }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5.4.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          #
          #
          #* name: Generate artifact attestation
          #  uses: actions/attest-build-provenance@v1
          #  with:
          #    subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          #    subject-digest: ${{ ste
